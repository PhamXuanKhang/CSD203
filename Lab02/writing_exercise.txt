1. x = 3, y = 5, z = 2
s.makeEmpty() -> stack: []
s.push(x) -> stack: [3]
s.push(4) -> stack: [3, 4]
s.pop() -> stack: [3], pop value: 4
s.push(y) -> stack: [3, 5]
s.push(3) -> stack: [3, 5, 3]
s.push(z) -> stack: [3, 5, 3, 2]
s.pop() -> stack: [3, 5, 3], pop value: z
s.push(2) -> stack: [3, 5, 3, 2]
s.push(x) -> stack: [3, 5, 3, 2, 3]
while not s.isEmpty() : print(‘s.pop() " "’)  //I don't understand this line

2. x = 3 y = 1
s.makeEmpty() -> stack: []
s.push(5) -> stack: [5]
s.push(7) -> stack: [5, 7]
s.pop() -> stack: [5], pop value: 7
x += y -> x = 4
s.pop() -> stack: [], pop value: 5
s.push(x) -> stack: [4]
s.push(y) -> stack: [4, 1]
s.push(2) -> stack: [4, 1, 2]
s.pop() -> stack: [4, 1], pop value: 2
s.pop() -> stack: [4], pop value: 1
while not s.isEmpty() : 
   y = s.pop()              -> output: 4
   print(y) 
print(‘x = ’, x) -> output: x = 4
(‘y = ’, y) -> output: y = 1

3. A letter means push and an asterisk means pop in the following sequence.  Give
the sequence of values returned by the pop operations when this sequence of
operations is performed on an initially empty stack.
         E A S * Y * Q U E * * * S T * * * I O * N * * *

// Output: S Y E U Q T S A O N I E

4. A letter means push and an asterisk means pop in the following sequence.  Give
the contents of s[0], ..., s[4] after this sequence of operations is performed on an
initially empty stack (the stack is implemented by array s[]).
         L A * S T I * N * F I R * S T * * O U * T * * * * * *

// Output: s[0] = L

5. A letter means enqueue and an asterisk means dequeue in the following sequence. 
Give the sequence of values returned by the dequeue operation when this sequence of
operations is performed on an initially empty queue.
         E A S * Y * Q U E * * * S T * * * I O * N * * *

// Output: E A S Y Q U E S T I O N

6. A letter means enqueue and an asterisk means dequeue in the following sequence. 
Give the contents of q[0], ..., q[4] after  this sequence of operations is performed on an
initially empty queue (the queue is implementated by circular array q[] with size 5).
         E A S * Y * Q U E * * * S T * * * I O * N * * *

// Output: None